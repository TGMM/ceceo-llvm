use crate::lexer::{Tok, LexicalError};
use crate::ast::{Node, Atom, parse_hash_symbol};
use std::str::FromStr;

grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Tok<'input> {
        "(" => Tok::LeftParen,
        ")" => Tok::RightParen,
        "'" => Tok::Quote,
        Symbol => Tok::Symbol(<&'input str>),
        HashSymbol => Tok::HashSymbol(<&'input str>),
        Str => Tok::Str(<&'input str>),
        Num => Tok::Num(<&'input str>)
    }
}

pub Program: Vec<Vec<Node>> = <Expr+> => <>;
Expr: Vec<Node> = "(" <a:AtomOrList*> ")" => <>;

AtomOrList: Node = {
    Expr => Node::List(<>),
    Atom => Node::Atom(<>),
    "'" <e:Expr> => Node::QuoteList(e),
    "'" <a:Atom> => Node::QuoteAtom(a)
}

Atom: Atom = {
    Symbol => Atom::Symbol(<>.to_string()),
    HashSymbol => parse_hash_symbol(<>),
    Str => Atom::Str(<>.to_string()),
    Num => Atom::Num(i32::from_str(<>).unwrap())
}
