use crate::lexer::{Tok, LexicalError};
use crate::ast::{Node, Atom};
use std::str::FromStr;

grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Tok<'input> {
        "(" => Tok::LeftParen,
        ")" => Tok::RightParen,
        Symbol => Tok::Symbol(<&'input str>),
        Str => Tok::Str(<&'input str>),
        Num => Tok::Num(<&'input str>),
        Op => Tok::Op(<&'input str>),
    }
}

pub Expr: Vec<Node> = "(" <a:AtomOrList+> ")" => <>;


AtomOrList: Node = {
    List => Node::List(<>),
    Atom => <>
}

List: Vec<Node> = "(" <a:Atom+> ")" => <>;

Atom: Node = {
    Symbol => Node::Atom(Atom::Symbol(<>.to_string())),
    Str => Node::Atom(Atom::Str(<>.to_string())),
    Num => Node::Atom(Atom::Num(i32::from_str(<>).unwrap())),
    Op => Node::Atom(Atom::Symbol(<>.to_string()))
}